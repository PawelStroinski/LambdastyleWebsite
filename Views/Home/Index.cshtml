<div class="page-header" id="banner">
    <div class="row">
        <div class="col-lg-7">
            <h1>Lambdastyle</h1>
            <p class="lead">A minimal JSON-to-any transformation language</p>
        </div>
        <div class="col-lg-5" style="padding: 15px 15px 0 15px;">
            <div class="well download">
                <span class="glyphicon glyphicon-cloud-download"></span>
                <a href="#windows">Windows</a>
                <a href="#osx">Mac OS X / Linux</a>
                <a href="#source">Source</a>
                <a href="#dotnet">.NET</a>
                <a href="#node">Node.js</a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-5">
        <ul>
            <li>It's really <strong>simple</strong>. Basically the whole syntax is just a <code>-></code>.</li>
            <li>It's <strong>streaming</strong> so size of input/output is almost <strong>unlimited</strong>.</li>
            <li>Can transform JSON to <strong>JSON, XML, HTML</strong> or any other text.</li>
            <li>Can <strong>preserve formatting</strong> in JSON.</li>
            <li>By default just copies input so edits are <strong>as easy as it gets</strong>.</li>
        </ul>
    </div>
    <div class="col-lg-7">
        <p>The easiest way to learn Lambdastyle is by looking at examples below. You can even write your own styles and see <strong>live</strong> effects of your edits!</p>
        <p>As Lambdastyle is currently only a <mark>prototype</mark>, please expect that some things will not work. Also Lambdastyle can change and is open to suggestions.</p>
    </div>
</div>

<div id="demo">
    <div class="well" data-bind="css: { 'errorish': error }">
        <form class="form-vertical">
            <fieldset>
                <legend>Demo
                <span class="glyphicon glyphicon-arrow-right" data-bind="click: next"></span>
                    <span class="glyphicon glyphicon-arrow-left" data-bind="click: prev"></span>
                </legend>
                <select class="form-control" data-bind="options: demoList, optionsText: 'text', value: demo">
                </select>
                <div class="row code-mirrors-container">
                    <div class="col-lg-4 form-group">
                        <label class="control-label">Input</label>
                        <div class="form-control" data-bind="codemirror: { value: input, mode: 'scheme' }"></div>
                    </div>
                    <div class="col-lg-4 form-group">
                        <label class="control-label">Style</label>
                        <div class="form-control" data-bind="codemirror: { value: style, mode: 'scheme' }"></div>
                    </div>
                    <div class="col-lg-4 form-group">
                        <label class="control-label">Output</label>
                        <div class="form-control" data-bind="codemirror: { value: output, mode: 'scheme' }"></div>
                    </div>
                </div>
                <div class="alert alert-danger" data-bind="text: error, visible: error">
                </div>
            </fieldset>
        </form>
    </div>
</div>

<div class="row" id="description">
    <div class="col-lg-12">
        <div class="page-header">
            <h1>Description</h1>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-4">
        <p>
            Style is a set of sentences in a form <code>subject -> predicate</code> where <code>subject</code> is an expression to match and <code>predicate</code> is raw text with placeholders:
            <code>|</code> is inner value of matched expression (e.g. text without quotation marks), <code>&</code> is outer value (e.g. text including quotation marks) and <code>#</code> is a key.
        </p>
        <p>Each sentence has to be in its own line although if <code>-> </code>doesn't exists in a line, the line is treated as predicate without subject.</p>
        <p>When sentence is intended below other sentence then it will be matched only when upper sentence is matched.</p>
    </div>
    <div class="col-lg-4">
        <p>That's pretty much to structure of style! The only next bit is subject expression.</p>
        <p>The most simple subject expression looks like <code>"id"</code> where id is some key in JSON file to match. The quotation marks are required.</p>
        <p>Keys can be chained together so it looks like <code>"order"."summary"."total"</code>. To match an item of array just use <code>item</code> word (without quotation marks).</p>
        <p>If you want to match parent based on its child, then use <code>[]</code> syntax, e.g. <code>[item]</code> matches whole array and <code>["foo"="bar"]</code> matches whole object with "foo" and "bar" key-value pair.</p>
    </div>
    <div class="col-lg-4">
        <p>There is one another very useful symbol to use in subject expression which is <code>*</code> and it of course matches everything. Default Lambdastyle stylesheet looks in practice like this: <code>* -> #&</code>.</p>
        <p>Which means "grab everything and output its key and then output its value with all wrapping around it". If you don't want this behavior, simply add following at the end of stylesheet: <code>* -></code>.</p>
        <p>Which means "grab everything and do nothing". Note that when you put this at the start of stylesheet, all other rules (sentences) will be ignored (if they are not strict). Therefore put it at the end of stylesheet.</p>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <p>That's all when it comes to basics. Please refer to examples to see more expression syntax options, indentation usage, among other interesting things. Please also see the next section for additional detail.</p>
        <h2>Language constructs</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Construct</th>
                    <th>Area</th>
                    <th>Meaning</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="nowrap">subject <code>-></code> predicate</td>
                    <td>general</td>
                    <td>Sentence. Each should be in its own line. Together they make stylesheet. Predicate is optional and can be put also before subject or in both places. "subject <code>-></code>" is also optional. "Subjectless" sentence is always outputted.</td>
                </tr>
                <tr>
                    <td>subject</td>
                    <td>general</td>
                    <td>Expression to match. Example: <code>"foo"</code> matches "foo" key.</td>
                </tr>
                <tr>
                    <td>predicate</td>
                    <td>general</td>
                    <td>Template used to replace matched subject in output. Example 1: <code>|</code> outputs inner value. Example 2: <code>some text</code> outputs <code>some text</code>.</td>
                </tr>
                <tr>
                    <td class="nowrap">&nbsp; &nbsp; child sentence</td>
                    <td>general</td>
                    <td>It's processed ("spawned") only when sentence above it is also processed. Can access whole input. <strong>This causes processor to go back and stream input from the beginning.</strong> Note that indentation can be of any size. Sentence below child sentence with bigger indentation becomes its child. When spaces and tabs are mixed, tab is considered equal to 8 spaces.</td>
                </tr>
                <tr>
                    <td><code>&</code></td>
                    <td>subject</td>
                    <td>Logical "and". Example: <code>["basePath" & "files"]</code> matches objects containing both "basePath" and "files" keys.</td>
                </tr>
                <tr>
                    <td><code>|</code></td>
                    <td>subject</td>
                    <td>Logical "or". Example: <code>["basePath" | "files"]</code> matches objects containing "basePath" or "files" key or both.</td>
                </tr>
                <tr>
                    <td><code>||</code></td>
                    <td>subject</td>
                    <td>Logical "short or". Example: <code>"label" || "id"</code> matches "label". Eventually if "label" doesn't exist in current parent then matches "id". <strong>This causes processor to go back and rewrite output as necessary.</strong></td>
                </tr>
                <tr>
                    <td><code>!</code></td>
                    <td>subject</td>
                    <td>Logical "not". Example: <code>!"basePath"</code> matches everything except "basePath" key.</td>
                </tr>
                <tr>
                    <td><code>"id"</code></td>
                    <td>subject</td>
                    <td>Matches a key. Example: <code>"singleRun"</code> matches "singleRun" key. Double quotes are required. Key doesn't have to be at root level.</td>
                </tr>
                <tr>
                    <td><code>*</code></td>
                    <td>subject</td>
                    <td>Matches "any". Example 1: <code>*</code> matches everything. Example 2: <code>*=*"&id="</code> matches all keys with values ending with "&id=".</td>
                </tr>
                <tr>
                    <td><code>=</code></td>
                    <td>subject</td>
                    <td>Matches equality. Example: <code>"name"="text1"</code> matches all "name" keys if they have "text1" value.</td>
                </tr>
                <tr>
                    <td><code>!=</code></td>
                    <td>subject</td>
                    <td>Matches nonequality. Example: <code>"label"!="Open New"</code> matches all "label" keys except those with "Open New" value. Doesn't match other keys.</td>
                </tr>
                <tr>
                    <td><code>item</code></td>
                    <td>subject</td>
                    <td>Matches item. Example: <code>item</code> matches any item in any array.</td>
                </tr>
                <tr>
                    <td><code>item[0]</code></td>
                    <td>subject</td>
                    <td>Matches item with zero-based index. Example: <code>item[1]</code> matches second item.</td>
                </tr>
                <tr>
                    <td><code>"value"</code>, <code>100</code>, <code>true</code>, <code>null</code></td>
                    <td>subject</td>
                    <td>Matches literal value. Example: <code>*=500</code> matches keys with value 500.</td>
                </tr>
                <tr>
                    <td><code>/regexp/</code></td>
                    <td>subject</td>
                    <td>Matches using regular expression. Example: <code>/[hH]eader/</code> matches both "header" and "Header".</td>
                </tr>
                <tr>
                    <td><code>[parent]</code></td>
                    <td>subject</td>
                    <td>Matches whole parent based on characteristics of its immediate child. Example: <code>["menu"]</code> matches whole parent of "menu" key. <strong>This causes processor to go back and rewrite output as necessary.</strong></td>
                </tr>
                <tr>
                    <td><code>path.path</code></td>
                    <td>subject</td>
                    <td>Matches a path. Example: <code>"servlet".item[0]."servlet-class"</code> matches "servlet-class" key inside first item of array under "servlet" key. Path doesn't have to start at root level but whole path must be matched directly.</td>
                </tr>
                <tr>
                    <td><code>."start"</code></td>
                    <td>subject</td>
                    <td>Matches a key or path inside child sentence starting directly at level where "spawner" sentence was matched. Example: <code>."label"</code> matches "label" key only placed directly in object matched by "spawner" sentence.</td>
                </tr>
                <tr>
                    <td><code>(parentheses)</code></td>
                    <td>subject</td>
                    <td>Round brackets can be used to group fragment of subject expression or around whole subject expression. Example: <code>("reporters")</code> works same as <code>"reporters"</code>.</td>
                </tr>
                <tr>
                    <td><code>|</code></td>
                    <td>predicate</td>
                    <td>Outputs inner value. <code>|</code> for array would NOT include []. <code>|</code> for value/item would NOT include "". <code>|</code> for set of key/value pairs would NOT include {}.</td>
                </tr>
                <tr>
                    <td><code>&</code></td>
                    <td>predicate</td>
                    <td>Outputs outer value. <code>&</code> for array would include []. <code>&</code> for value/item would include "". <code>&</code> for set of key/value pairs would include {}.</td>
                </tr>
                <tr>
                    <td><code>#</code></td>
                    <td>predicate</td>
                    <td>Outputs outer ID. <code>#</code> for key/value pair outputs key and colon. <code>#</code> for item or root outputs nothing.</td>
                </tr>
                <tr>
                    <td class="nowrap"><code>\escape sequences</code></td>
                    <td>predicate</td>
                    <td>Outputs characters such as <code>\|</code> (pipe) or <code>\n</code> (new line) in predicate. When subject contains regular expression, <code>\1</code> through to <code>\9</code> can be used as backreferences in predicate.</td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<div class="row" id="download">
    <div class="col-lg-12">
        <div class="page-header">
            <h1>Download</h1>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <ul class="nav nav-tabs" style="margin-bottom: 15px;">
            <li class="active"><a href="#windows" data-toggle="tab">Windows</a></li>
            <li><a href="#osx" data-toggle="tab">Mac OS X / Linux</a></li>
            <li><a href="#source" data-toggle="tab">Source</a></li>
            <li><a href="#dotnet" data-toggle="tab">.NET</a></li>
            <li><a href="#node" data-toggle="tab">Node.js</a></li>
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="windows">
                <ol>
                    <li>Install <a href="http://www.microsoft.com/en-us/download/details.aspx?id=30653">.NET Framework 4.5</a> if you don't already have it.</li>
                    <li>Download <a href="/ftp/Lambdastyle-0.1.0.zip">Lambdastyle-0.1.0.zip</a> and extract it.</li>
                    <li>Use the following command: <code>lambdastyle -i "path to input JSON file" -s "path to style file" -o "path to output file"</code></li>
                </ol>
            </div>
            <div class="tab-pane" id="osx">
                <ol>
                    <li>Install <a href="http://www.go-mono.com/mono-downloads/download.html">Mono 3.2.3 (or newer)</a> if you don't already have it.</li>
                    <li>Download <a href="/ftp/Lambdastyle-0.1.0.zip">Lambdastyle-0.1.0.zip</a> and extract it.</li>
                    <li>Use the following command: <code>mono lambdastyle.exe -i "path to input JSON file" -s "path to style file" -o "path to output file"</code></li>
                </ol>
            </div>
            <div class="tab-pane" id="source">
                <p>Download <a href="https://github.com/PawelStroinski/LambdastylePrototype/archive/master.zip">zip file</a> or go to <a href="https://github.com/PawelStroinski/LambdastylePrototype">GitHub</a>. Please refer to README for development notes.</p>
            </div>
            <div class="tab-pane" id="dotnet">
                <p><a href="http://www.nuget.org/packages/LambdastylePrototype">You can download Lambdastyle from NuGet:</a> <code>Install-Package LambdastylePrototype</code></p>
                <p>Then for example:</p>
                <pre>
var lambdastyle = new LambdastylePrototype.Facade();
var output = lambdastyle.ProcessString(input: "[1, 2]", style: "[1] -> [|, 3]");
Console.WriteLine(output); // prints [1, 2, 3]
</pre>
                <p>
                    You can use <code>LambdastylePrototype.Facade</code> class which implements the following interface:
                    <pre>
public interface IFacade
{
    string ProcessString(string input, string style);
    void ProcessFile(string inputPath, string stylePath, string outputPath);
    void ProcessStream(Stream input, Stream style, EditableStream output);
}
</pre>
                </p>
            </div>
            <div class="tab-pane" id="node">
                <p><a href="https://www.npmjs.org/package/lambdastyle-prototype">You can download Lambdastyle from npm:</a> <code>npm install lambdastyle-prototype</code></p>
                <p>In order to use this module on Windows you will need <a href="http://www.microsoft.com/en-us/download/details.aspx?id=30653">.NET Framework 4.5</a> or on Mac OS X / Linux you will need <a href="http://www.go-mono.com/mono-downloads/download.html">Mono 3.4.0 (or newer) x64</a>.</p>
                <p>Example code:</p>
                <pre>
var lambdastyle = require('lambdastyle-prototype'),
    bag = { input: '[1, 2]', style: '[1] -> [|, 3]' };
    
lambdastyle.processString(bag, function (err, output) {
  if (err) throw err;
  console.log(output); // prints [1, 2, 3]
});
</pre>
            </div>
        </div>
    </div>
</div>

<footer>
    <div class="row">
        <div class="col-lg-12">

            <ul class="list-unstyled">
                <li class="pull-right"><a href="#">Back to top</a></li>
                <li><a href="https://github.com/PawelStroinski/LambdastylePrototype/blob/master/COPYING.md">MIT License</a></li>
            </ul>
            <p><a href="http://getbootstrap.com" rel="nofollow">Bootstrap</a> template made by <a href="http://thomaspark.me" rel="nofollow">Thomas Park</a>. Icons from <a href="http://fortawesome.github.io/Font-Awesome/" rel="nofollow">Font Awesome</a>. Web fonts from <a href="http://www.google.com/webfonts" rel="nofollow">Google</a>.</p>

        </div>
    </div>

</footer>
